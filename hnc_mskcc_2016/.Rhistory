noncontrol <- noncontrol[, common_genes]
# Initialize result data frame
results <- data.frame(
Gene = common_genes,
p_value = NA,
log2FC = NA
)
View(results)
# Perform Wilcoxon rank-sum test and calculate log2 fold change
for (gene in common_genes) {
# Extract expression values
control_vals <- control[[gene]]
noncontrol_vals <- noncontrol[[gene]]
# Wilcoxon rank-sum test
test <- wilcox.test(noncontrol_vals, control_vals, exact = FALSE)
# Means
mean_control <- mean(control_vals)
mean_noncontrol <- mean(noncontrol_vals)
# Log2 fold change (add pseudocount to avoid log(0))
log2FC <- log2((mean_noncontrol + 1e-6) / (mean_control + 1e-6))
# Store results
results[results$Gene == gene, "p_value"] <- test$p.value
results[results$Gene == gene, "log2FC"] <- log2FC
}
# Adjust p-values using Benjamini-Hochberg FDR correction
results$adj_p_value <- p.adjust(results$p_value, method = "fdr")
# Sort results by adjusted p-value
results <- results %>% arrange(adj_p_value)
# Save results
write.csv(results, "C:/Users/meshr/Downloads/OA_Control_HTC_DE_Results.csv", row.names = FALSE)
# Optional: Print top results
print(head(results))
View(results)
# Load required libraries
library(dplyr)
library(readr)
# Load data
control <- read.csv("C:/Users/meshr/Downloads/control_HTC_expression_data.csv", row.names = 1)
noncontrol <- read.csv("C:/Users/meshr/Downloads/noncontrol_HTC_expression_data.csv", row.names = 1)
# Intersect common genes
common_genes <- intersect(colnames(control), colnames(noncontrol))
control <- control[, common_genes]
noncontrol <- noncontrol[, common_genes]
# Initialize results data frame
results <- data.frame(
Gene = common_genes,
log2FoldChange = NA,
p_value = NA,
stringsAsFactors = FALSE
)
# Perform Wilcoxon rank-sum test and compute log2 fold change
for (gene in common_genes) {
control_vals <- control[[gene]]
noncontrol_vals <- noncontrol[[gene]]
# Wilcoxon rank-sum test (unpaired)
test <- wilcox.test(noncontrol_vals, control_vals)
# Compute log2 fold change using pseudocounts to avoid log(0)
mean_control <- mean(control_vals)
mean_noncontrol <- mean(noncontrol_vals)
log2fc <- log2((mean_noncontrol + 1e-6) / (mean_control + 1e-6))
# Store results
results[results$Gene == gene, "log2FoldChange"] <- log2fc
results[results$Gene == gene, "p_value"] <- test$p.value
}
# Adjust p-values for multiple testing (optional)
results$adj_p_value <- p.adjust(results$p_value, method = "fdr")
# Sort by p-value
results <- results %>% arrange(p_value)
# Save to CSV
write.csv(results, "C:/Users/meshr/Downloads/OA_Control_HTC_DE_Results.csv", row.names = FALSE)
# View top results
print(head(results))
View(results)
for (gene in common_genes) {
control_vals <- control[[gene]]
noncontrol_vals <- noncontrol[[gene]]
test <- wilcox.test(noncontrol_vals, control_vals)
mean_control <- mean(control_vals)
mean_noncontrol <- mean(noncontrol_vals)
log2fc <- log2((mean_noncontrol) / (mean_control))
results[results$Gene == gene, "log2FoldChange"] <- log2fc
results[results$Gene == gene, "p_value"] <- test$p.value
}
results$adj_p_value <- p.adjust(results$p_value, method = "fdr")
results <- results %>% arrange(p_value)
print(head(results))
library(dplyr)
library(readr)
control <- read.csv("C:/Users/meshr/Downloads/control_HTC_expression_data.csv", row.names = 1)
noncontrol <- read.csv("C:/Users/meshr/Downloads/noncontrol_HTC_expression_data.csv", row.names = 1)
common_genes <- intersect(colnames(control), colnames(noncontrol))
control <- control[, common_genes]
noncontrol <- noncontrol[, common_genes]
results <- data.frame(
Gene = common_genes,
log2FoldChange = NA,
p_value = NA,
stringsAsFactors = FALSE
)
for (gene in common_genes) {
control_vals <- control[[gene]]
noncontrol_vals <- noncontrol[[gene]]
test <- wilcox.test(noncontrol_vals, control_vals)
mean_control <- mean(control_vals)
mean_noncontrol <- mean(noncontrol_vals)
log2fc <- log2((mean_noncontrol + 1e-6) / (mean_control + 1e-6))
results[results$Gene == gene, "log2FoldChange"] <- log2fc
results[results$Gene == gene, "p_value"] <- test$p.value
}
results$adj_p_value <- p.adjust(results$p_value, method = "fdr")
results <- results %>% arrange(p_value)
write.csv(results, "C:/Users/meshr/Downloads/OA_Control_HTC_DE_Results.csv", row.names = FALSE)
print(head(results))
control <- read.csv("C:/Users/meshr/Downloads/control_preHTC_expression_data.csv", row.names = 1)
noncontrol <- read.csv("C:/Users/meshr/Downloads/noncontrol_preHTC_expression_data.csv", row.names = 1)
common_genes <- intersect(colnames(control), colnames(noncontrol))
control <- control[, common_genes]
View(control)
noncontrol <- noncontrol[, common_genes]
results <- data.frame(
Gene = common_genes,
log2FoldChange = NA,
p_value = NA,
stringsAsFactors = FALSE
)
for (gene in common_genes) {
control_vals <- control[[gene]]
noncontrol_vals <- noncontrol[[gene]]
test <- wilcox.test(noncontrol_vals, control_vals)
mean_control <- mean(control_vals)
mean_noncontrol <- mean(noncontrol_vals)
log2fc <- log2((mean_noncontrol + 1e-6) / (mean_control + 1e-6))
results[results$Gene == gene, "log2FoldChange"] <- log2fc
results[results$Gene == gene, "p_value"] <- test$p.value
}
results$adj_p_value <- p.adjust(results$p_value, method = "fdr")
results <- results %>% arrange(p_value)
write.csv(results, "C:/Users/meshr/Downloads/OA_Control_preHTC_DE_Results.csv", row.names = FALSE)
print(head(results))
control <- read.csv("C:/Users/meshr/Downloads/control_HTC_expression_data.csv", row.names = 1)
noncontrol <- read.csv("C:/Users/meshr/Downloads/noncontrol_HTC_expression_data.csv", row.names = 1)
common_genes <- intersect(colnames(control), colnames(noncontrol))
# Load necessary libraries
library(readxl)
library(ggplot2)
library(tidyr)
# Read the data from the Excel file
file_path <- "C:/Users/meshr/Downloads/net1_AUC.xlsx"
df <- read_excel(file_path)
# Convert data to long format for ggplot
df_long <- gather(df, key = "AUC_Replicate", value = "AUC_Value", -Methods)
# Generate the error box plot
ggplot(df_long, aes(x = Methods, y = AUC_Value)) +
geom_boxplot(fill = "green", color = "black", outlier.color = "red", outlier.shape = 16) +
theme_minimal() +
labs(title = "DREAM5-net1 AUC error plot",
x = "Methods",
y = "AUC Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Read the data from the Excel file
file_path <- "C:/Users/meshr/Downloads/net2_AUC.xlsx"
df <- read_excel(file_path)
# Convert data to long format for ggplot
df_long <- gather(df, key = "AUC_Replicate", value = "AUC_Value", -Methods)
# Generate the error box plot
ggplot(df_long, aes(x = Methods, y = AUC_Value)) +
geom_boxplot(fill = "green", color = "black", outlier.color = "red", outlier.shape = 16) +
theme_minimal() +
labs(title = "DREAM5-net2 AUC error plot",
x = "Methods",
y = "AUC Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(dplyr)
library(readr)
control <- read.csv("C:/Users/meshr/Downloads/control_HTC_expression_data.csv", row.names = 1)
noncontrol <- read.csv("C:/Users/meshr/Downloads/noncontrol_HTC_expression_data.csv", row.names = 1)
library(preprocessCore)
control_norm <- normalize.quantiles(control)
control <- as.matrix(control)
noncontrol <- as.matrix(noncontrol)
control_norm <- normalize.quantiles(control)
View(control_norm)
View(control)
View(control)
View(control_norm)
# Load required libraries
library(dplyr)
library(readr)
# Load data
control <- read.csv("C:/Users/meshr/Downloads/control_preHTC_expression_data.csv", row.names = 1)
noncontrol <- read.csv("C:/Users/meshr/Downloads/noncontrol_preHTC_expression_data.csv", row.names = 1)
View(control)
# Intersect common genes
common_genes <- intersect(colnames(control), colnames(noncontrol))
control <- control[, common_genes]
noncontrol <- noncontrol[, common_genes]
# Normalize function: log-normalization with scaling
normalize_log <- function(df, scale_factor = 10000) {
lib_size <- rowSums(df)
df_norm <- sweep(df, 1, lib_size, FUN = "/") * scale_factor
log2(df_norm + 1)
}
# Apply normalization
control_norm <- normalize_log(control)
View(control_norm)
noncontrol_norm <- normalize_log(noncontrol)
# Initialize results data frame
results <- data.frame(
Gene = common_genes,
log2FoldChange = NA,
p_value = NA,
stringsAsFactors = FALSE
)
# Perform Wilcoxon rank-sum test and compute log2 fold change
for (gene in common_genes) {
control_vals <- control_norm[[gene]]
noncontrol_vals <- noncontrol_norm[[gene]]
# Wilcoxon rank-sum test (unpaired)
test <- wilcox.test(noncontrol_vals, control_vals)
# Compute log2 fold change using mean of normalized values
mean_control <- mean(control_vals)
mean_noncontrol <- mean(noncontrol_vals)
log2fc <- mean_noncontrol - mean_control  # already in log2 scale
# Store results
results[results$Gene == gene, "log2FoldChange"] <- log2fc
results[results$Gene == gene, "p_value"] <- test$p.value
}
# Adjust p-values for multiple testing (optional)
results$adj_p_value <- p.adjust(results$p_value, method = "fdr")
# Sort by p-value
results <- results %>% arrange(p_value)
# View top results
print(head(results))
View(control)
library(readxl)
library(ggplot2)
library(tidyr)
library(RColorBrewer)
# Read the data from the Excel file
file_path <- "C:/Users/meshr/Downloads/mESC_gold_AUC.xlsx"
df <- read_excel(file_path)
# Convert data to long format
df_long <- gather(df, key = "AUC_Replicate", value = "AUC_Value", -Methods)
# Create the plot
p <- ggplot(df_long, aes(x = Methods, y = AUC_Value, fill = Methods)) +
geom_boxplot(outlier.color = "red", outlier.shape = 16, width = 0.6) +
scale_fill_brewer(palette = "Set2") +
theme_minimal(base_size = 16) +
labs(
title = "mESC Gold AUC Error Distribution",
x = "Methods",
y = "AUC Value"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(size = 12),
legend.position = "none",
plot.title = element_text(face = "bold", hjust = 0.5),
panel.grid.major = element_line(color = "gray90")
)
# Save the plot as high-resolution PNG
ggsave("C:/Users/meshr/Downloads/mESC_gold_AUC_Boxplot.jpg", plot = p, width = 10, height = 6, dpi = 600)
# Read the data from the Excel file
file_path <- "C:/Users/meshr/Downloads/pancreas_AUC.xlsx"
df <- read_excel(file_path)
# Convert data to long format
df_long <- gather(df, key = "AUC_Replicate", value = "AUC_Value", -Methods)
# Create the plot
p <- ggplot(df_long, aes(x = Methods, y = AUC_Value, fill = Methods)) +
geom_boxplot(outlier.color = "red", outlier.shape = 16, width = 0.6) +
scale_fill_brewer(palette = "Set2") +
theme_minimal(base_size = 16) +
labs(
title = "Pancreas AUC Error Distribution",
x = "Methods",
y = "AUC Value"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(size = 12),
legend.position = "none",
plot.title = element_text(face = "bold", hjust = 0.5),
panel.grid.major = element_line(color = "gray90")
)
# Save the plot as high-resolution PNG
ggsave("C:/Users/meshr/Downloads/pancreas_AUC_Boxplot.jpg", plot = p, width = 10, height = 6, dpi = 600)
# Read the data from the Excel file
file_path <- "C:/Users/meshr/Downloads/mESC_AUC.xlsx"
df <- read_excel(file_path)
# Convert data to long format
df_long <- gather(df, key = "AUC_Replicate", value = "AUC_Value", -Methods)
# Create the plot
p <- ggplot(df_long, aes(x = Methods, y = AUC_Value, fill = Methods)) +
geom_boxplot(outlier.color = "red", outlier.shape = 16, width = 0.6) +
scale_fill_brewer(palette = "Set2") +
theme_minimal(base_size = 16) +
labs(
title = "mESC batches AUC Error Distribution",
x = "Methods",
y = "AUC Value"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(size = 12),
legend.position = "none",
plot.title = element_text(face = "bold", hjust = 0.5),
panel.grid.major = element_line(color = "gray90")
)
# Save the plot as high-resolution PNG
ggsave("C:/Users/meshr/Downloads/mESC_batches_AUC_Boxplot.jpg", plot = p, width = 10, height = 6, dpi = 600)
# Read the data from the Excel file
file_path <- "C:/Users/meshr/Downloads/mESC_AUC.xlsx"
df <- read_excel(file_path)
# Convert data to long format
df_long <- gather(df, key = "AUC_Replicate", value = "AUC_Value", -Methods)
# Create the plot
p <- ggplot(df_long, aes(x = Methods, y = AUC_Value, fill = Methods)) +
geom_boxplot(outlier.color = "red", outlier.shape = 16, width = 0.6) +
scale_fill_brewer(palette = "Set2") +
theme_minimal(base_size = 16) +
labs(
title = "mESC batches AUC Error Distribution",
x = "Methods",
y = "AUC Value"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(size = 12),
legend.position = "none",
plot.title = element_text(face = "bold", hjust = 0.5),
panel.grid.major = element_line(color = "gray90")
)
# Save the plot as high-resolution PNG
ggsave("C:/Users/meshr/Downloads/mESC_batches_AUC_Boxplot.jpg", plot = p, width = 10, height = 6, dpi = 600)
# Read the data from the Excel file
file_path <- "C:/Users/meshr/Downloads/mESC_gold_AUC.xlsx"
df <- read_excel(file_path)
# Convert data to long format
df_long <- gather(df, key = "AUC_Replicate", value = "AUC_Value", -Methods)
# Create the plot
p <- ggplot(df_long, aes(x = Methods, y = AUC_Value, fill = Methods)) +
geom_boxplot(outlier.color = "red", outlier.shape = 16, width = 0.6) +
scale_fill_brewer(palette = "Set2") +
theme_minimal(base_size = 16) +
labs(
title = "mESC gold AUC Error Distribution",
x = "Methods",
y = "AUC Value"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 14),
axis.text.y = element_text(size = 12),
legend.position = "none",
plot.title = element_text(face = "bold", hjust = 0.5),
panel.grid.major = element_line(color = "gray90")
)
# Save the plot as high-resolution PNG
ggsave("C:/Users/meshr/Downloads/mESC_gold_AUC_Boxplot.jpg", plot = p, width = 10, height = 6, dpi = 600)
library(ggplot2)
library(ggforce)
# Example copy number data
copy_number <- data.frame(
chr = rep("chr14", 100),
pos = seq(0, 100e6, length.out = 100),
log2_ratio = runif(100, -1, 3)
)
View(copy_number)
# Example SV data for arcs
sv_arcs <- data.frame(
x = c(60e6, 40e6),  # start
xend = c(120e6, 110e6),  # end
y = c(2.5, 2.2),
yend = c(2.5, 2.2)
)
View(sv_arcs)
# Main plot
ggplot(copy_number, aes(x = pos, y = log2_ratio)) +
geom_line(color = "blue") +
geom_bezier(data = sv_arcs,
aes(x = c(x, (x+xend)/2, xend),
y = c(y, y + 1.5, yend)),
color = "red", size = 0.5) +
theme_minimal() +
labs(title = "Chromosome 14 Structural Variants and Copy Number")
warnings()
# Main plot
ggplot(copy_number, aes(x = pos, y = log2_ratio)) +
geom_line(color = "blue") +
geom_bezier(data = sv_arcs,
aes(x = c(x, (x+xend)/2, xend),
y = c(y, y + 1.5, yend)),
color = "red", size = 0.5) +
theme_minimal() +
labs(title = "Chromosome 14 Structural Variants and Copy Number")
library(data.table)
mutations <- fread("C:/Ankur_IIITD/cancer_genomics/paac_jhu_2014/data_mutations.txt")
View(mutations)
mutations <- fread("C:/Ankur_IIITD/cancer_genomics/hnc_mskcc_2016/data_mutations.txt")
View(mutations)
clinical <- fread("C:/Ankur_IIITD/cancer_genomics/hnc_mskcc_2016/data_clinical_patient.txt")
View(clinical)
clin_sample <- fread("C:/Ankur_IIITD/cancer_genomics/hnc_mskcc_2016/data_clinical_sample.txt")
View(clin_sample)
View(clinical)
knitr::opts_chunk$set(echo = TRUE)
# setting working directory
setwd("C:/Users/meshr/Downloads/CentyleBio_Assignment")
# Loading required packages
library(DESeq2)
library(EnhancedVolcano)
# Loading the data
hel.data <- read.delim("count_hel-control-vs-helTreatment.txt")
# Data Processing
hel.data <- hel.data[, -8]
rownames(hel.data) <- hel.data$Geneid
hel.data <- hel.data[, -1]
head(hel.data)
# Creating metadata
hel.metadata <- data.frame(
row.names = colnames(hel.data),
condition = rep(c("control", "treatment"), each = 3)
)
hel.metadata
# Creating DESeq2 dataset
dds <- DESeqDataSetFromMatrix(countData = hel.data,
colData = hel.metadata,
design = ~ condition)
# Running DESeq
dds <- DESeq(dds)
results <- results(dds)
results
# Saving the results
ordered.results <- results[order(results$padj), ]
ordered.results <- as.data.frame(ordered.results)
head(ordered.results)
# write.csv(ordered.results, "DEG_full_list.csv")
# Generating volcano plot
EnhancedVolcano(ordered.results,
lab = rownames(ordered.results),
x = "log2FoldChange",
y = "padj",
title = "HEL Treatment Vs Control",
pCutoff = 0.05,
FCcutoff = 1)
# Loading required packages
library(clusterProfiler)
library(org.Hs.eg.db)
library(enrichplot)
# Filtering significant genes
significant.genes <- rownames(subset(ordered.results, padj < 0.05 & abs(log2FoldChange) > 1))
ensembl.genes <- bitr(significant.genes, fromType = "ENSEMBL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
# GO Enrichment
go.results <- enrichGO(gene = ensembl.genes$ENTREZID,
OrgDb = org.Hs.eg.db,
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
readable = TRUE)
dotplot(go.results, showCategory = 10, title = "Top 10 GO Terms")
barplot(go.results, showCategory = 10, title = "Top 10 GO Biological Process")
emapplot(pairwise_termsim(go.results), showCategory = 10)
cnetplot(go.results, categorySize = "pvalue", foldChange = NULL)
# KEGG Enrichment
kegg.results <- enrichKEGG(gene = ensembl.genes$ENTREZID,
organism = "hsa",
pvalueCutoff = 0.05)
dotplot(kegg.results, showCategory = 10, title = "Top 10 KEGG Pathways")
barplot(kegg.results, showCategory = 10, title = "Top 10 KEGG Biological Process")
emapplot(pairwise_termsim(kegg.results), showCategory = 10)
cnetplot(kegg.results, categorySize = "pvalue", foldChange = NULL)
# Normalizing the counts data
hel.norm <- vst(dds, blind = FALSE)
pcaData <- plotPCA(hel.norm, intgroup = "condition", returnData = TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
# PCA plot
ggplot(pcaData, aes(x = PC1, y = PC2, colour = condition)) +
geom_point(size = 3) +
xlab(paste0("PC1 (", percentVar[1], "%)")) +
ylab(paste0("PC2 (", percentVar[2], "%)")) +
theme_minimal() +
ggtitle("PCA of HEL Samples")
# Heatmap of top 20 DEGs
library(pheatmap)
top20genes <- rownames(ordered.results)[1:20]
mat <- assay(hel.norm)[top20genes, ]
pheatmap(mat, scale = "row", annotation_col = hel.metadata)
knitr::opts_chunk$set(echo = TRUE)
# Dataset Link - https://www.cbioportal.org/study/summary?id=hnc_mskcc_2016
# Head and Neck Cancer (HNC), HPV (Human Papillomavirus)
setwd("C:/Ankur_IIITD/cancer_genomics/HNC/hnc_mskcc_2016")
list.files()
# Load required packages
library(survival)
library(survminer)
library(dplyr)
# Load clinical patients data
clin.patient <- read.delim("data_clinical_patient.txt", skip = 4)
clin.patient <- clin.patient %>%
mutate(OS_MONTHS = as.numeric(OS_MONTHS),
OS_STATUS = ifelse(grepl("DECEASED", OS_STATUS), 1, 0))
setwd("C:/Ankur_IIITD/cancer_genomics/HNC/hnc_mskcc_2016")
# Load clinical patients data
clin.patient <- read.delim("data_clinical_patient.txt", skip = 4)
clin.patient <- clin.patient %>%
mutate(OS_MONTHS = as.numeric(OS_MONTHS),
OS_STATUS = ifelse(grepl("DECEASED", OS_STATUS), 1, 0))
list.files()
# Load clinical patients data
clin.patient <- read.delim("data_clinical_patient.txt", skip = 4)
clin.patient <- clin.patient %>%
mutate(OS_MONTHS = as.numeric(OS_MONTHS),
OS_STATUS = ifelse(grepl("DECEASED", OS_STATUS), 1, 0))
